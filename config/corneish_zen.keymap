/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

/{
    behaviors {
        tap_dance_pc: tap_dance {
            bindings = <&kp SEMICOLON>, <&kp COLON>;
        };

        tap_dance_comi: tap_dance {
            bindings = <&kp QUOTE>, <&kp DOUBLE_QUOTE>;
        };

        tap_dance_sla: tap_dance {
            bindings = <&kp SLASH>, <&kp QUESTION>;
        };

        tap_dance_lt: tap_dance {
            bindings = <&kp COMMA>, <&kp LESS_THAN>;
        };

        tap_dance_gt: tap_dance {
            bindings = <&kp DOT>, <&kp GREATER_THAN>;
        };
        tap_dance_cut: tap_dance{
            bindings = <LC(C)>, <LG(C)>;
        };
         tap_dance_paste: tap_dance{
            bindings = <LC(V)>, <LG(V)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp TAB    &kp Q &kp W &kp E &kp R &kp T                   &kp Y     &kp U     &kp I         &kp O         &kp P          &kp BSPC
                &kp LCTRL  &kp A &kp S &kp D &kp F &kp G                   &kp H     &kp J     &kp K         &kp L         &tap_dance_pc  &tap_dance_comi
                &kp LSHIFT &kp Z &kp X &kp C &kp V &kp B                   &kp N     &kp M     &tap_dance_lt &tap_dance_gt &tap_dance_sla &kp RSHIFT
                                 &kp LALT &mo LOWER &kp SPACE              &kp ENTER &mo RAISE &kp RALT
            >;
        };

        lower_layer {
            bindings = <
                &kp ESC   &kp N1 &kp N2     &kp N3        &kp N4      &kp N5                               &kp N6            &kp N7    &kp N8      &kp N9   &kp N0    &kp DEL
                &kp LCTRL &none &lsft(LALT) &lctl(LALT)   &RG(SPACE)  &kp MUTE                             &tap_dance_cut    &kp K_APP &kp HOME    &kp UP   &kp END   &kp PSCR
                &kp CAPS  &none &none       &C_PREV       &C_PP       &C_NEXT                              &tap_dance_paste  &none     &kp LEFT    &kp DOWN &kp RIGHT &kp INS
                                            &kp LGUI      &mo LOWER   &kp SPACE                            &kp ENTER &mo RAISE &kp RALT
            >;
        };

        raise_layer {
            bindings = <
                &kp ESC    &kp EXCLAMATION &kp AT        &kp HASH      &kp DOLLAR   &kp PERCENT                    &kp CIRCUMFLEX &kp AMPERSAND &kp ASTERISK         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS &kp BSPC
                &kp LCTRL  &TILDE          &NON_US_BSLH  &none         &none        &none                          &kp MINUS      &kp EQUAL     &kp LEFT_BRACKET     &kp RIGHT_BRACKET     &kp PIPE              &kp GRAVE
                &kp LSHIFT &none           &none         &LG(LSFT(3))  &LG(LSFT(4)) &LG(LSFT(5))                   &kp UNDERSCORE &kp PLUS      &kp LEFT_CURLY_BRACE &kp RIGHT_CURLY_BRACE &kp BACKSLASH         &kp ENTER
                                                         &kp LALT      &mo LOWER    &kp SPACE                      &kp ENTER      &mo RAISE     &kp RALT
            >;
        };

        adjust_layer {
            bindings = <
                &rgb_ug RGB_OFF &rgb_ug RGB_ON  &none           &none            &none           &none               &kp F1    &kp F2    &kp F3   &kp F4   &kp F5   &kp F6
                &bt BT_CLR_ALL  &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3     &bt BT_SEL 4    &bt BT_SEL 5        &kp F7    &kp F8    &kp F9   &kp F10  &kp F11  &kp F12
                &rgb_ug RGB_EFF &rgb_ug RGB_EFR &rgb_ug RGB_SPI &rgb_ug RGB_BRI  &rgb_ug RGB_BRD &none               &none     &none     &none    &none    &none    &none
                                                                &kp LALT          &mo LOWER      &kp SPACE           &kp ENTER &mo RAISE &kp RALT
            >;
        };
    };
};